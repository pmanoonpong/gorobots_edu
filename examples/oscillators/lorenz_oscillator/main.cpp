// Matsuoka, K. (1985). Sustained oscillations generated by mutually inhibiting neurons with adaptation. Biological Cybernetics, 52: 345â€“353.
// Endo et al., Learning CPG-based Biped Locomotion with a Policy Gradient Method: Application to a Humanoid Robot, The International Journal of Robotics Research February 2008 vol. 27 no. 2 213-228

#include <stdio.h>
#include <iostream>
#include <fstream>
#include <string.h>

#include "Lorenz.h"

///////////////////////////////////////////

int main(int argc, char* argv[])
{
  

  double x;
  double y;
  double z;
  double x_dot;
  double y_dot;
  double z_dot;

  double Output_CPG;


  ofstream saveFile1;
  saveFile1.open("ReadSensors1.txt",ios::out);


  x = 0.001;
  x_dot = 0.001;
  y = 0.001;
  y_dot = 0.001;
  z = 0.001;
  z_dot = 0.001;
  Output_CPG = 0.0;




  printf("initial\n");





  do{
    

    double sigma = 10;
    double beta = 8/3;
    double ro = 28;
    double TAU = 0.01; //TAU = 0.1 = low resolution does not work, TAU = 0.01 or 0.001 = High resolution works

    //dx/dt = -sigma*x+sigma*y;
    //dy/dt =-y-x*z;
    //dz/dt =-beta*z+x*y-beta*ro;

    //Neuron1	
    x_dot = -sigma*x+sigma*y;
    //Neuron2	
    y_dot =-y-x*z;
    //Neuron3	
    z_dot =-beta*z+x*y-beta*ro;




    //Update state variable with Euler first order's method!    
    x += TAU*x_dot;
    y += TAU*y_dot;
    z += TAU*z_dot;


    //////////////////////////////////////

    Output_CPG = (x-y);



    printf("Lorenz %f %f %f %f %f %f %f\n", Output_CPG, x, y, z, x_dot, y_dot, z_dot);

    saveFile1 <<Output_CPG<<" "<<x<<" "<<y<<" "<<z<<" "<<x_dot<<"  "<<y_dot<<" "<<z_dot<< "   \n" << flush; //SAVE DATA

  }while(1==1);


  return 0;
}
